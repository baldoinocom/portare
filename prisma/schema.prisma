// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Log {
  id        BigInt     @id @default(autoincrement())
  action    ActionType
  model     String
  data      Json
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("logs")
}

enum ActionType {
  create
  update
  delete

  @@map("action_type")
}

model User {
  id             String @id @default(uuid())
  username       String @unique
  externalUserId String @unique @map("external_user_id")

  personId Int?    @unique @map("person_id")
  person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade)

  groups Group[] @relation("UserGroup", map: "user_group")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([username])
  @@index([externalUserId])
  @@index([personId])
  @@map("users")
}

model Group {
  id   Int    @id @default(autoincrement())
  name String @unique

  roles   Role[] @relation("GroupRole", map: "group_role")
  members User[] @relation("UserGroup", map: "user_group")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("groups")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  groups      Group[]      @relation("GroupRole", map: "group_role")
  permissions Permission[] @relation("RolePermission", map: "role_permission")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id    String          @id @default(cuid())
  group PermissionGroup
  code  PermissionCode
  guard PermissionGuard

  roles Role[] @relation("RolePermission", map: "role_permission")

  @@unique([group, code, guard])
  @@map("permissions")
}

enum PermissionCode {
  list
  view
  create
  update
  delete

  import

  navigate

  updateStatus @map("update_status")

  @@map("permission_code")
}

enum PermissionGroup {
  // System
  user
  group
  role
  permission

  trip
  grouping

  driver
  aso
  absentDriver

  aggregate
  client
  unit

  truck
  semiTrailer
  trailerConfiguration @map("trailer_configuration")
  trailerType          @map("trailer_type")
  cargo
  trailerCertificate   @map("trailer_certificate")
  stoppedVehicle       @map("stopped_vehicle")
  brand

  mdfe

  @@map("permission_group")
}

enum PermissionGuard {
  action
  page
  component

  @@map("permission_guard")
}

model Person {
  id          Int     @id @default(autoincrement())
  name        String
  nickname    String?
  document    String? @unique @db.VarChar(11) // CPF - Cadastro de Pessoas Físicas
  phoneNumber String? @map("phone_number") @db.VarChar(11)

  unitId Int?  @map("unit_id")
  unit   Unit? @relation(fields: [unitId], references: [companyId])

  aggregateId Int?       @map("aggregate_id")
  aggregate   Aggregate? @relation(fields: [aggregateId], references: [companyId])

  user   User?
  driver Driver?

  ticketsAsRequester       Ticket[]       @relation("TicketRequester", map: "ticket_requester")
  ticketsAsAcceptor        Ticket[]       @relation("TicketAcceptor", map: "ticket_acceptor")
  notificationsAsRecipient Notification[] @relation("NotificationRecipient", map: "notification_recipient")
  notificationsAsSender    Notification[] @relation("NotificationSender", map: "notification_sender")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@index([nickname])
  @@index([document])
  @@index([unitId])
  @@index([aggregateId])
  @@map("people")
}

model Driver {
  personId Int    @id @map("person_id")
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  cnh       String? @unique @db.VarChar(11) // CNH - Carteira Nacional de Habilitação
  cnhMirror String? @unique @map("cnh_mirror") @db.VarChar(10) // CNH Espelho

  aso      ASO[]
  absences AbsentDriver[]

  trips     Trip[]
  groupings Grouping[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("drivers")
}

// ASO - Atestado de Saúde Ocupacional
model ASO {
  id             Int            @default(autoincrement())
  startedAt      DateTime       @map("started_at")
  expirationType ExpirationType @map("expiration_type")

  driverId Int    @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [personId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id, driverId])
  @@map("aso")
}

model AbsentDriver {
  id        Int          @default(autoincrement())
  note      String?      @db.Text
  startedAt DateTime     @map("started_at")
  endedAt   DateTime     @map("ended_at")
  status    DriverStatus

  driverId Int    @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [personId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id, driverId])
  @@index([status])
  @@map("absent_drivers")
}

enum DriverStatus {
  leaveOfAbsence     @map("leave_of_absence") // Afastado
  medicalCertificate @map("medical_certificate") // Atestado
  break // Folga
  vacation // Férias

  @@map("driver_status")
}

model Company {
  id        Int         @id @default(autoincrement())
  name      String
  tradeName String?     @map("trade_name")
  document  String?     @unique @db.VarChar(14) // CPF - Cadastro de Pessoas Físicas | CNPJ - Cadastro Nacional da Pessoa Jurídica
  type      CompanyType @default(cnpj)

  addressId Int?     @map("address_id")
  address   Address? @relation(fields: [addressId], references: [id])

  client    Client?
  unit      Unit?
  aggregate Aggregate?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([name])
  @@index([tradeName])
  @@index([document])
  @@index([type])
  @@map("companies")
}

enum CompanyType {
  cnpj
  cpf

  @@map("company_type")
}

model Client {
  companyId Int        @id @map("company_id")
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type      ClientType @default(both)

  tripsOrigin      Trip[] @relation("OriginCompany", map: "origin_company")
  tripsDestination Trip[] @relation("DestinationCompany", map: "destination_company")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@map("clients")
}

enum ClientType {
  both // Ambos
  origin // Origem
  destination // Destino

  @@map("client_type")
}

model Unit {
  companyId Int     @id @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  employees  Person[]
  aggregates Aggregate[]
  vehicles   Vehicle[]
  trips      Trip[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("units")
}

model Aggregate {
  companyId Int     @id @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  unitId Int?  @map("unit_id")
  unit   Unit? @relation(fields: [unitId], references: [companyId])

  employees Person[]
  vehicles  Vehicle[]
  trips     Trip[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([companyId])
  @@index([unitId])
  @@map("aggregates")
}

model Address {
  id      Int     @id @default(autoincrement())
  zipCode String? @map("zip_code")
  state   String?
  city    String?
  locale  String? @db.Text

  companies Company[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([zipCode])
  @@map("addresses")
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @unique

  vehicles Vehicle[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("brands")
}

model Vehicle {
  id           Int     @id @default(autoincrement())
  licensePlate String  @unique @db.VarChar(10)
  model        String?
  year         String?
  axle         Int?
  chassis      String? @unique @db.VarChar(17)
  renavam      String? @unique @db.VarChar(11) // RENAVAM - Registro Nacional de Veículos Automotores

  brandId Int?   @map("brand_id")
  brand   Brand? @relation(fields: [brandId], references: [id])

  unitId Int?  @map("unit_id")
  unit   Unit? @relation(fields: [unitId], references: [companyId])

  aggregateId Int?       @map("aggregate_id")
  aggregate   Aggregate? @relation(fields: [aggregateId], references: [companyId])

  trucks   Truck[]
  trailers Trailer[]

  stops   StoppedVehicle[]
  tickets Ticket[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([brandId])
  @@index([unitId])
  @@index([aggregateId])
  @@map("vehicles")
}

model StoppedVehicle {
  id        Int           @default(autoincrement())
  note      String?       @db.Text
  startedAt DateTime      @map("started_at")
  endedAt   DateTime      @map("ended_at")
  status    VehicleStatus

  vehicleId Int     @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id, vehicleId])
  @@map("stopped_vehicles")
}

enum VehicleStatus {
  maintenance // Manutenção
  documentation // Documentação

  @@map("vehicle_status")
}

model Truck {
  id              Int     @id @default(autoincrement())
  compressor      Boolean @default(false)
  compressorModel String? @map("compressor_model")

  vehicleId Int     @unique @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  trips     Trip[]
  groupings Grouping[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trucks")
}

model SemiTrailer {
  id Int @id @default(autoincrement())

  configurationId Int                  @map("configuration_id")
  configuration   TrailerConfiguration @relation(fields: [configurationId], references: [id])

  typeId Int         @map("type_id")
  type   TrailerType @relation(fields: [typeId], references: [id])

  cargos   Cargo[]   @relation("SemiTrailerCargo", map: "semi_trailer_cargo")
  trailers Trailer[] @relation("SemiTrailer", map: "semi_trailer")

  trips     Trip[]
  groupings Grouping[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([configurationId])
  @@index([typeId])
  @@map("semi_trailers")
}

model Trailer {
  id          Int     @id @default(autoincrement())
  fleetNumber String? @unique

  vehicleId Int     @unique @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  semiTrailerId Int?         @map("semi_trailer_id")
  SemiTrailer   SemiTrailer? @relation("SemiTrailer", fields: [semiTrailerId], references: [id], map: "semi_trailer")

  certificates TrailerCertificate[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trailers")
}

model TrailerConfiguration {
  id               Int    @id @default(autoincrement())
  name             String @unique
  numberOfTrailers Int    @default(1) @map("number_of_trailers")

  semiTrailers SemiTrailer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trailer_configurations")
}

model TrailerType {
  id   Int    @id @default(autoincrement())
  name String @unique

  semiTrailers SemiTrailer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("trailer_types")
}

model Cargo {
  id   Int    @id @default(autoincrement())
  name String @unique

  semiTrailers SemiTrailer[] @relation("SemiTrailerCargo", map: "semi_trailer_cargo")

  trips Trip[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cargos")
}

model TrailerCertificate {
  id             Int            @default(autoincrement())
  startedAt      DateTime       @map("started_at")
  expirationType ExpirationType @map("expiration_type")

  trailerId Int     @map("trailer_id")
  trailer   Trailer @relation(fields: [trailerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([id, trailerId])
  @@map("trailer_certificates")
}

enum ExpirationType {
  quarterly // Trimestral
  yearly // Anual

  @@map("expiration_type")
}

model Grouping {
  id Int @id @default(autoincrement())

  driverId Int?    @map("driver_id")
  driver   Driver? @relation(fields: [driverId], references: [personId], onDelete: Cascade)

  truckId Int?   @map("truck_id")
  truck   Truck? @relation(fields: [truckId], references: [id], onDelete: Cascade)

  semiTrailerId Int?         @map("semi_trailer_id")
  semiTrailer   SemiTrailer? @relation(fields: [semiTrailerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([driverId, truckId, semiTrailerId])
  @@map("groupings")
}

model Trip {
  id         String     @id @default(cuid())
  draft      Boolean    @default(false)
  order      String?
  note       String?    @db.Text
  departedAt DateTime?  @map("departed_at")
  arrivedAt  DateTime?  @map("arrived_at")
  status     TripStatus @default(scheduled)

  originId Int?    @map("origin_id")
  origin   Client? @relation("OriginCompany", fields: [originId], references: [companyId], map: "origin_company")

  destinationId Int?    @map("destination_id")
  destination   Client? @relation("DestinationCompany", fields: [destinationId], references: [companyId], map: "destination_company")

  driverId Int?    @map("driver_id")
  driver   Driver? @relation(fields: [driverId], references: [personId])

  truckId Int?   @map("truck_id")
  truck   Truck? @relation(fields: [truckId], references: [id])

  semiTrailerId Int?         @map("semi_trailer_id")
  semiTrailer   SemiTrailer? @relation(fields: [semiTrailerId], references: [id])

  cargoId Int?   @map("cargo_id")
  cargo   Cargo? @relation(fields: [cargoId], references: [id])

  unitId Int?  @map("unit_id")
  unit   Unit? @relation(fields: [unitId], references: [companyId])

  aggregateId Int?       @map("aggregate_id")
  aggregate   Aggregate? @relation(fields: [aggregateId], references: [companyId])

  tickets Ticket[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([draft])
  @@index([status])
  @@index([originId])
  @@index([destinationId])
  @@index([driverId])
  @@index([truckId])
  @@index([semiTrailerId])
  @@index([cargoId])
  @@index([unitId])
  @@index([aggregateId])
  @@map("trips")
}

enum TripStatus {
  scheduled // Agendado
  loaded // Carregado
  departure // Partida
  terminal // Terminal
  unloaded // Descarregado
  finished // Finalizado
  canceled // Cancelado

  @@map("trip_status")
}

model Ticket {
  id       String         @id @default(cuid())
  note     String         @db.Text
  action   TicketAction
  reaction TicketReaction @default(pending)

  requesterId Int    @map("requester_id")
  requester   Person @relation("TicketRequester", fields: [requesterId], references: [id], map: "ticket_requester")

  acceptorId Int?    @map("acceptor_id")
  acceptor   Person? @relation("TicketAcceptor", fields: [acceptorId], references: [id], map: "ticket_acceptor")

  vehicleId Int?     @map("vehicle_id")
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])

  tripId String? @map("trip_id")
  trip   Trip?   @relation(fields: [tripId], references: [id])

  notifications Notification[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([requesterId])
  @@index([acceptorId])
  @@index([vehicleId])
  @@index([tripId])
  @@map("tickets")
}

enum TicketAction {
  maintenanceRequest @map("maintenance_request") // Solicitação de manutenção

  @@map("ticket_action")
}

enum TicketReaction {
  pending // Pendente
  accepted // Aceito
  denied // Negado

  @@map("ticket_reaction")
}

model Notification {
  id     Int              @id @default(autoincrement())
  readAt DateTime?        @map("read_at")
  type   NotificationType

  ticketId String? @map("ticket_id")
  ticket   Ticket? @relation(fields: [ticketId], references: [id])

  recipientId Int    @map("recipient_id")
  recipient   Person @relation("NotificationRecipient", fields: [recipientId], references: [id], map: "notification_recipient")

  senderId Int?    @map("sender_id")
  sender   Person? @relation("NotificationSender", fields: [senderId], references: [id], map: "notification_sender")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([ticketId])
  @@index([recipientId])
  @@index([senderId])
  @@map("notifications")
}

enum NotificationType {
  server // Servidor
  ticket // Chamado
  ticketAnswered @map("ticket_answered") // Chamado respondido

  @@map("notification_type")
}

model MDFe {
  id       Int       @id
  data     Json
  branch   String?
  closedAt DateTime? @map("closed_at")
  note     String?   @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([branch])
  @@map("mdfe")
}
